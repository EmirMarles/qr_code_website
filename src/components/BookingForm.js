import React, { useState } from 'react';
import './BookingForm.css';

const BookingForm = ({ onSubmit, selectedService, selectedStaff, selectedDate, selectedTime, formData, onFormDataChange }) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({});

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    onFormDataChange({
      ...formData,
      [name]: value
    });
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: ''
      });
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.clientName.trim()) {
      newErrors.clientName = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (formData.clientName.trim().length < 2 || formData.clientName.trim().length > 50) {
      newErrors.clientName = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤';
    }
    
    if (!formData.clientPhone.trim()) {
      newErrors.clientPhone = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/^\+998[0-9]{9}$/.test(formData.clientPhone.replace(/[\s\-()]/g, ''))) {
      newErrors.clientPhone = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998XXXXXXXXX';
    }

    if (formData.notes && formData.notes.length > 500) {
      newErrors.notes = '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      const bookingData = {
        clientName: formData.clientName.trim(),
        clientPhone: formData.clientPhone.trim(),
        date: selectedDate,
        startTime: selectedTime,
        notes: formData.notes || ''
      };

      await onSubmit(bookingData);
    } catch (error) {
      console.error('Booking submission error:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const formatDate = (dateString) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        weekday: 'long',
        year: 'numeric',
        month: 'long', 
        day: 'numeric' 
      });
    } catch (error) {
      return dateString;
    }
  };

  return (
    <form className="booking-form" onSubmit={handleSubmit}>
      <h3>–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–ø–∏—Å—å</h3>
      <p className="section-description">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä –∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</p>
      
      <div className="booking-summary">
        <h4>–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏</h4>
        <div className="summary-item">
          <span>–£—Å–ª—É–≥–∞:</span>
          <span>{selectedService?.name}</span>
        </div>
        <div className="summary-item">
          <span>–ú–∞—Å—Ç–µ—Ä:</span>
          <span>{selectedStaff?.fullName}</span>
        </div>
        <div className="summary-item">
          <span>–î–∞—Ç–∞:</span>
          <span>{formatDate(selectedDate)}</span>
        </div>
        <div className="summary-item">
          <span>–í—Ä–µ–º—è:</span>
          <span>{selectedTime}</span>
        </div>
        <div className="summary-item total">
          <span>–°—É–º–º–∞:</span>
          <span>{selectedService?.price || 0} —Å—É–º</span>
        </div>
      </div>

      <div className="form-group">
        <label htmlFor="clientName">–í–∞—à–µ –∏–º—è *</label>
        <input
          type="text"
          id="clientName"
          name="clientName"
          value={formData.clientName}
          onChange={handleInputChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
          className={errors.clientName ? 'error' : ''}
          required
        />
        {errors.clientName && (
          <span className="error-message">{errors.clientName}</span>
        )}
      </div>

      <div className="form-group">
        <label htmlFor="clientPhone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *</label>
        <input
          type="tel"
          id="clientPhone"
          name="clientPhone"
          value={formData.clientPhone}
          onChange={handleInputChange}
          placeholder="+998901234567"
          className={errors.clientPhone ? 'error' : ''}
          required
        />
        {errors.clientPhone && (
          <span className="error-message">{errors.clientPhone}</span>
        )}
      </div>

      <div className="form-group">
        <label htmlFor="notes">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
        <textarea
          id="notes"
          name="notes"
          value={formData.notes || ''}
          onChange={handleInputChange}
          rows="3"
          placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..."
          className={errors.notes ? 'error' : ''}
        />
        {errors.notes && (
          <span className="error-message">{errors.notes}</span>
        )}
      </div>

      <div className="form-actions">
        <button 
          type="submit" 
          className="book-btn"
          disabled={isSubmitting || !selectedService || !selectedStaff || !selectedDate || !selectedTime}
        >
          {isSubmitting ? (
            <>
              <span className="loading-spinner"></span>
              –ó–∞–ø–∏—Å—å...
            </>
          ) : (
            '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º'
          )}
        </button>
      </div>

      <div className="booking-note">
        <p>üìù –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏.</p>
      </div>
    </form>
  );
};

export default BookingForm;
